#include <SDL.h>
#include <string>

class Manager;

class Clock {
public:
  static Clock& getInstance();
  unsigned int getTicks() const;
  unsigned int getTotalTicks() const { return sumOfAllTicks; }

private:
  friend class Manager;
  bool started;
  bool paused;
  bool sloMo;
  const bool framesAreCapped;
  const int frameCap;

  unsigned int frames;

  unsigned int tickSum;
  unsigned int sumOfAllTicks;
  unsigned int timeAtStart;
  unsigned int timeAtPause;
  unsigned int currTicks;
  unsigned int prevTicks;
  unsigned int ticks;

  unsigned int getElapsedTicks();
  Clock& operator++();
  void toggleSloMo();

  bool isStarted() const { return started; }
  bool isPaused() const  { return paused;  }
  unsigned int getFrames() const  { return frames;  }
  unsigned int getSeconds() const { return getTicks()/1000;  }
  unsigned int capFrameRate() const;

  void start();
  void pause();
  void unpause();
  void display() const;

  Clock()
  {
  started(false),
  paused(false),
  sloMo(false),
  framesAreCapped(Gamedata::getInstance().getXmlBool("framesAreCapped")),
  frameCap(Gamedata::getInstance().getXmlInt("frameCap")),
  frames(0),
  tickSum(0),
  sumOfAllTicks(0),
  timeAtStart(0), timeAtPause(0),
  currTicks(0), prevTicks(0), ticks(0)
  start();
  }
  Clock(const Clock&)
  {
  started(false),
  paused(false),
  sloMo(false),
  framesAreCapped(Gamedata::getInstance().getXmlBool("framesAreCapped")),
  frameCap(Gamedata::getInstance().getXmlInt("frameCap")),
  frames(0),
  tickSum(0),
  sumOfAllTicks(0),
  timeAtStart(0), timeAtPause(0),
  currTicks(0), prevTicks(0), ticks(0)
  start();
  }
  Clock& operator=(const Clock&);
};
